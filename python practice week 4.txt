https://github.com/Artur4black/Python
import numpy as np
n = int(input())
arr = np.array([[int(x) for x in input(f"Enter the value{[i]}:").split()] for i in range(n)])

print(arr)
for i in range(3):
    temp = np.array(arr[i][0])
    arr[i][0] = arr[i][-1]
    arr[i][-1] = temp
print(arr)

def isMagicSquare( mat) :
  n = len(mat)
  sumd1=0
  sumd2=0
  for i in range(n):
    sumd1+=mat[i][i]
    sumd2+=mat[i][n-i-1]
     if not(sumd1==sumd2):
    return False
  for i in range(n):
    sumr=0
    sumc=0
    for j in range(n):
      sumr+=mat[i][j]
      sumc+=mat[j][i]
    if not(sumr==sumc==sumd1):
      return False
  return True
     

  > Абай Разаков:
#1.1
n=3
array=[]
for a in range(n):
    one_d=[]
    for b in range(n):
        one_d.append(int(input()))
    array.append(one_d)
positive = 0
sum = 0
for i in range(n):
    for j in range(i + 1, n):
        if array[i][j] > 0:
            sum = sum + array[i][j]
            positive = positive + 1
print("positive: " , positive)
print("Sum: " , sum)
#1.2
n = 3
array = []
for i in range(n):
    inp = input().split()
    ma = map(int, inp)
    list_ma = list(ma)
    array.append(list_ma)

def find_min(a):
    list_m = map(min, a)
    return list(list_m)
#2.1
n=3
array=[]
for a in range(n):
    one_d=[]
    for b in range(n):
        one_d.append(int(input()))
    array.append(one_d)
def square(array):
    n = 3
    di_1 = 0
    di_2 = 0
    for i in range(n):
        di_1 = di_1 + array[i][i]
        di_2 = di_2 + array[i][n - i - 1]
    if (di_1 != di_2):
        return False
    for i in range(n):
        r = 0
        c = 0
        for j in range(n):
            r  += array[i][j]
            c += array[j][i]
        if not (r  == c == di_1):
            return False
    return True

if (square(array)):
    print("Square")
else:
    print("Not a square")
#2.2
import numpy as np
n = int(input())
arr = np.array([[int(x) for x in input(f"Enter the value{[i]}:").split()] for i in range(n)])

print(arr)
for i in range(3):
    temp = np.array(arr[i][0])
    arr[i][0] = arr[i][-1]
    arr[i][-1] = temp
print(arr)
#3.1
n = int(input())
m = int(input())
array = []
for i in range(n):
    inp = input().split()
    ma = map(int, inp)
    array.append(list(ma))
for i in range(m):
    for j in range(n):
        print(array[i][j], end=' ')
    print()
b = "YES"
for i in range(m):
    for j in range(n):
        if array[i][j] != array[j][i]:
            b = "NO"
            break
print(b)
3.2\
n=int(input('Enter the number of rows: '))\
m=int(input('Enter the number of columns: '))\
array=[]\
for i in range(n):\
    b=[]\
    for j in range(n):\
        print('Enter the elements: ')\
        b.append(int(input()))\
    array.append(b)\
\
print('Final array: ')\
for i in range(m):\
    for j in range(n):\
        print(array[i][j], end=' ')\
    print()\
\
max = array[0][0]\
ie = je = 0\
for i in range(m):\
    for j in range(n):\
        if array[i][j] > max:\
            max = array[i][j]\
            ie = i\
            je = j \
    array[0], array[ie] = array[ie], array[0] \
    array[0][0], array[0][je] = array[0][je], array[0][0]\
for row in array:\
    print(*map('\{:2d\}'.format, row))\
4.1\
n = int(input('n:'))\
m = int(input('m:'))\
array = []\
for i in range(n):\
    array.append(list(map(int, input().split())))\
for i in range(m):\
    for j in range(n):\
        print(array[i][j], end=' ')\
    print()\
s = []\
for i in range(len(array)):\
    s.append(sum(array[i]))\
print(array[s.index(max(s))], 'largest sum:', max(s), array[s.index(min(s))], 'smallest sum:', min(s))\
4.2\
n = int(input('n:'))\
m = int(input('m:'))\
array = []\
for i in range(n):\
    array.append(list(map(int, input().split())))\
for i in range(m):\
    for j in range(n):\
        print(array[i][j], end=' ')\
    print()\
\
array = [[1 if x > 0 else 0 for x in i] for i in array]\
for i in range(len(array)):\
    print(*[array[i][x] if x <= i else '' for x in range(len(array[i]))], '')\
5.1\
def printArray(arr, m, n):\
    for i in range(m):\
        for j in range(n):\
            print(arr[i][j], end=' ')\
        print()\
\
\
def sortArr(arr, m, n):\
    for i in range(m):\
        arr[i].sort()\
    print()\
\
\
n = int(input('Enter the number of rows: '))\
m = int(input('Enter the number of columns: '))\
array = []\
for i in range(m):\
    b = []\
    for j in range(n):\
        print('Enter the element: ')\
        b.append(int(input()))\
    array.append(b)\
\
print('Final array: ')\
printArray(array, m, n)\
\
sortArr(array, m, n)\
print('Changed array: ')\
printArray(array, m, n)\
5.2\
def smallestInRow(mat):\
    minm = min(mat)\
    return minm\
\
\
n = int(input('n:'))\
m = int(input('m:'))\
array = []\
for i in range(n):\


array.append(list(map(int, input().split())))\
for i in range(m):\
    for j in range(n):\
        print(array[i][j], end=' ')\
    print()\
minm = []\
for i in range(n):\
    minm.append(smallestInRow(array[i]))\
print(minm)\
\
for i in range(len(minm)):\
    if minm[i] % 2 == 0:\
        minm[i] = 0\
    else:\
        minm[i] = 1\
print(minm)\
6.1\
MAX = 100\
\
\
def smallestInRow(mat, n, m):\
    print("\{", end="")\
    for i in range(n):\
\
        min = mat[i][0]\
\
        for j in range(1, m, 1):\
\
            if (mat[i][j] < min):\
                min = mat[i][j]\
\
        print(min, end=",")\
\
    print("\}")\
\
\
def smallestInCol(mat, n, m):\
    print("\{", end="")\
    for i in range(m):\
\
        min = mat[0][i]\
\
        for j in range(1, n, 1):\
\
            if mat[j][i] < min:\
                min = mat[j][i]\
\
        print(min, end=",")\
\
    print("\}")\
\
n = 3\
m = 3\
mat = [[2, 1, 7],\
       [3, 7, 2],\
       [5, 4, 9]];\
\
print("Minimum element of each row is",\
      end=" ")\
smallestInRow(mat, n, m)\
\
print("Minimum element of each column is",\
          end=" ")\
smallestInCol(mat, n, m)\
6.2\
def diagonalsMinMax(mat):\
    n = len(mat)\
    if n == 0:\
        return\
\
    principalMin = mat[0][0]\
    principalMax = mat[0][0]\
    secondaryMin = mat[0][n - 1]\
    secondaryMax = mat[0][n - 1]\
\
    for i in range(1, n):\
\
        for j in range(1, n):\
\
            if i == j:\
\
                if mat[i][j] < principalMin:\
                    principalMin = mat[i][j]\
\
                if mat[i][j] > principalMax:\
                    principalMax = mat[i][j]\
\
            if (i + j) == (n - 1):\
\
                if mat[i][j] < secondaryMin:\
                    secondaryMin = mat[i][j]\
\
                if mat[i][j] > secondaryMax:\
                    secondaryMax = mat[i][j]\
\
    print("Principal Diagonal Smallest Element: ",\
          principalMin)\
    print("Principal Diagonal Greatest Element : ",\
          principalMax)\
\
    print("Secondary Diagonal Smallest Element: ",\
          secondaryMin)\
    print("Secondary Diagonal Greatest Element: ",\
          secondaryMax)\
\
\
matrix = [[1, 2, 3, 4, -10],\
          [5, 6, 7, 8, 6],\
          [1, 2, 11, 3, 4],\
          [5, 6, 70, 5, 8],\
          [4, 9, 7, 1, -5]]\
diagonalsMinMax(matrix)\
7.1\
def lower(matrix, row, col):\
    for i in range(0, row):\
\
        for j in range(0, col):\
\
            if i < j:\
\
                print("0", end=" ")\
\
            else:\
                print(matrix[i][j],\
                      end=" ")\
\
        print(" ")\
\
\
def upper(matrix, row, col):\
    for i in range(0, row):\
\
        for j in range(0, col):\
\
            if i > j:\
                print("0", end=" ")\
\
            else:\
                print(matrix[i][j],\
                      end=" ")\
\
        print(" ")\
\
\
matrix = [[1, 2, 3],\
          [4, 5, 6],\
          [7, 8, 9]]\
row = 3\
col = 3\
\
print("Lower triangular matrix: ")\
lower(matrix, row, col)\
\
print("Upper triangular matrix: ")\
upper(matrix, row, col)\
7.2\
def diagonal(A):\
    N = 3\
\
    for col in range(N):\
\
        startcol = col\
        startrow = 0\
\
        while (startcol >= 0 and\
               startrow < N):\
            print(A[startrow][startcol], end=" ")\
\
            startcol -= 1\
            startrow += 1\
\
        print()\
\
    for row in range(1, N):\
        startrow = row\
        startcol = N - 1\
\
        while (startrow < N and\
               startcol >= 0):\
            print(A[startrow][startcol],\
                  end=" ")\
\
            startcol -= 1\
            startrow += 1\
\
        print()\
\
\
A = [[1, 2, 3],\
    [4, 5, 6],\
    [7, 8, 9]]\
\
diagonal(A)\
8.1\
N = 4\
\
\
def showMatrix(mat):\
    i = None\
    j = None\
    for i in range(N):\
        for j in range(N):\
            print(mat[i][j], end=" ")\
        print('')\
\
\
def kthSmallest(arr, n, K):\
    arr.sort()\
\
    return arr[K - 1]\
\
\
def ReplaceDiagonal(mat, K):\
    i = None\
    j = None\

> Абай Разаков:
arr = [0] * N\
\
    for i in range(N):\
        for j in range(N):\
            arr[j] = mat[i][j]\
        mat[i][i] = kthSmallest(arr, N, K)\
    showMatrix(mat)\
\
\
mat = [[1, 2, 3, 4], [4, 2, 7, 6], [3, 5, 1, 9], [2, 4, 6, 8]]\
\
K = 3\
ReplaceDiagonal(mat, K)\
9.1\
MAX = 100\
\
\
def largestSquare(matrix, R, C, q_i, q_j, K, Q):\
    for q in range(Q):\
        i = q_i[q]\
        j = q_j[q]\
        min_dist = min(min(i, j),\
                       min(R - i - 1, C - j - 1))\
        ans = -1\
        for k in range(min_dist + 1):\
\
            count = 0\
\
            for row in range(i - k, i + k + 1):\
                for col in range(j - k, j + k + 1):\
                    count += matrix[row][col]\
\
            if count > K:\
                break\
\
            ans = 2 * k + 1\
        print(ans)\
\
\
matrix = [[1, 0, 1, 0, 0],\
          [1, 0, 1, 1, 1],\
          [1, 1, 1, 1, 1],\
          [1, 0, 0, 1, 0]]\
K = 9\
Q = 1\
q_i = [1]\
q_j = [2]\
largestSquare(matrix, 4, 5, q_i, q_j, K, Q)\
9.2\
def getcofactor(m, i, j):\
    return [row[: j] + row[j + 1:] for row in (m[: i] + m[i + 1:])]\
\
\
def determinantOfMatrix(mat):\
    if len(mat) == 2:\
        value = mat[0][0] * mat[1][1] - mat[1][0] * mat[0][1]\
        return value\
\
    Sum = 0\
\
    for current_column in range(len(mat)):\
        sign = (-1) ** current_column\
\
        sub_det = determinantOfMatrix(getcofactor(mat, 0, current_column))\
\
        Sum += (sign * mat[0][current_column] * sub_det)\
\
    return Sum\
\
\
mat = [[1, 0, 2, -1],\
        [3, 0, 0, 5],\
        [2, 1, 4, -3],\
        [1, 0, 5, 0]]\
print('Determinant of the matrix is :', determinantOfMatrix(mat))\
10.1\
def maxelement(arr):\
    no_of_rows = len(arr)\
    no_of_column = len(arr[0])\
\
    for i in range(no_of_rows):\
\
        max1 = 0\
        for j in range(no_of_column):\
            if arr[i][j] > max1:\
                max1 = arr[i][j]\
\
        print(max1)\
\
\
arr = [[3, 4, 1, 8],\
       [1, 4, 9, 11],\
       [76, 34, 21, 1],\
       [2, 1, 4, 5]]\
\
maxelement(arr)\
10.2\
def sortRowWise(m):\
    for i in range(len(m)):\
\
        for j in range(len(m[i])):\
\
            for k in range(len(m[i]) - j - 1):\
\
                if m[i][k] > m[i][k + 1]:\
                    # swapping of elements\
                    t = m[i][k]\
                    m[i][k] = m[i][k + 1]\
                    m[i][k + 1] = t\
\
    for i in range(len(m)):\
        for j in range(len(m[i])):\
            print(m[i][j], end=" ")\
        print()\
\
\
m = [[9, 8, 7, 1], [7, 3, 0, 2], [9, 5, 3, 2], [6, 3, 1, 2]]\
sortRowWise(m)\
11.1\
n = int(input('Enter the size of the square matrix: '))\
array = []\
print('Enter your array: ')\
for i in range(n):\
    array.append([int(j) for j in input().split()])\
\
min_ = [min(i) for i in array]\
ind_row_with_min = min_.index(min(min_))\
\
print('Min of array: ', min(map(min, array)))\
print('Sum: ', format(sum(array[ind_row_with_min])))\
11.2\
from operator import mul\
from functools import reduce\
\
\
def mprint(matrix):\
    for row in matrix:\
        for item in row:\
            print(f'\{item:>3\}', end=' ')\
        print()\
\
\
n = int(input('Enter the size of the square matrix: '))\
array = []\
print('Enter your array: ')\
for i in range(n):\
    array.append([int(j) for j in input().split()])\
\
tmatrix = list(zip(*array))\
ps = [reduce(mul, row) for row in tmatrix]\
min_p = min(ps)\
idx = ps.index(min_p)\
\
if idx < n - 1:\
    tmatrix[idx], tmatrix[idx + 1] = tmatrix[idx + 1], tmatrix[idx]\
else:\
    tmatrix[idx], tmatrix[idx - 1] = tmatrix[idx - 1], tmatrix[idx]\
\
matrix = list(zip(*tmatrix))\
mprint(matrix)\
12.1\
n = int(input('Enter the size of the square matrix: '))\
array = []\
print('Enter your array: ')\
for i in range(n):\
    array.append([int(j) for j in input().split()])\
\
a_rev = list(map(list, zip(*array)))\
for i in range(n):\
    for j in range(n):\
        if array[i] == a_rev[j]:\
            print(i + 1, 'row and', j + 1, 'column are equal')\
12.2\
def spec_subtract(matrix):\

> Абай Разаков:
for i in range(0, len(matrix) - 1):\
        for j in range(0, len(matrix[i])):\
            matrix[i][j] = matrix[i][j] - matrix[len(matrix) - 1][j]\
    return matrix\
\
\
n = int(input())\
m = int(input())\
array = []\
for i in range(n):\
    array.append(list(map(int, input().split())))\
\
array = spec_subtract(matrix=array)\
for i in range(n):\
    for j in range(m):\
        print(array[i][j], end=' ')\
    print()\
13.2\
n = int(input())\
m = int(input())\
array = []\
for i in range(n):\
    array.append(list(map(int, input().split())))\
\
MIN = min(map(min, array))\
MAX = max(map(max, array))\
print('Min:', MIN, ', max:', MAX) \
 \
                            array[array.index(min(array))], array[array.index(max(array))] = array[array.index(max(array))], array[array.index(min(array))]\
for i in range(n):\
    for j in range(m):\
        print(array[i][j], end=' ')\
    print()}
     
           

R,C = 4,4
 

def first(arr , low , high):
 
    if(high >= low):
 
        
        mid = low + (high - low)//2
     
        
        if ( ( mid == 0 or arr[mid-1] == 0) and arr[mid] == 1):
            return mid
     
        elif (arr[mid] == 0):
            return first(arr, (mid + 1), high);
         
        
        else:
            return first(arr, low, (mid -1));
 
    return -1
 
def rowWithMax1s(mat):
    max_row_index,Max = 0,-1
 for i in range(R):
    index = first (mat[i], 0, C-1)
        if (index != -1 and C-index > Max):
            Max = C - index;
            max_row_index = i
    return max_row_index
     
def sortByRow(mat, n, ascending):
 
    for i in range(n):
        if (ascending):   
            mat[i].sort()
        else:
            mat[i].sort(reverse=True)
  

def transpose(mat, n):
 
    for i in range(n):
        for j in range(i + 1, n):
         
            
            temp = mat[i][j]
            mat[i][j] = mat[j][i]
            mat[j][i] = temp
 

def sortMatRowAndColWise(mat, n):
 
    sortByRow(mat, n, True)
  
    
    transpose(mat, n)
  
   
    sortByRow(mat, n, False)
  
    
    transpose(mat, n)
  

def printMat(mat, n):
 
    for i in range(n):
        for j in range(n):
            print(mat[i][j] , " ", end="")
        print()
 

n = 3
      
mat = [[3, 2, 1],
    [9, 8, 7],
    [6, 5, 4]]
  
print("Original Matrix:")
printMat(mat, n)
  
sortMatRowAndColWise(mat, n)
  
print("Matrix After Sorting:")
printMat(mat, n)






